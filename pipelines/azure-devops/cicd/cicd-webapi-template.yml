parameters:
  - name: base_name
    type: string
  - name: environment_symbol
    type: string

jobs:
- job: WebApiBuildDeploy
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET 5 sdk'
    inputs:
      packageType: sdk
      version: 5.0.x
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: 'restore'
      projects: '$(System.DefaultWorkingDirectory)/src/WeatherApi/WeatherApi/WeatherApi.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: 'build'
      projects: '$(System.DefaultWorkingDirectory)/src/WeatherApi/WeatherApi/WeatherApi.csproj'
      arguments: '--configuration Release /WarnAsError'
  - task: DotNetCoreCLI@2
    displayName: 'Publish build'
    inputs:
      command: publish
      projects: '$(System.DefaultWorkingDirectory)/src/WeatherApi/WeatherApi/WeatherApi.csproj'
      publishWebProjects: false
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish build artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'WeatherApi'
      publishLocation: 'Container'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'WeatherApi'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - task: AzureRmWebAppDeployment@4
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: '$(AZURE_RM_SVC_CONNECTION)'
      appType: 'webApp'
      WebAppName: 'ase-${{parameters.base_name}}-${{parameters.environment_symbol}}'
      packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

